services:
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - e-commerce-backend

  kafka-1:
    image: apache/kafka:latest
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092 # Consumers, producers listen to this addr
      KAFKA_LISTENERS: PLAINTEXT://kafka-1:9092,CONTROLLER://kafka-1:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER # Listen this addr for controller
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT # Listen this addr for non-controller brokers (their communication)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT # No TLS and auth
      CLUSTER_ID: "12242d2d-73eb-4acf-ae75-744c4e6968ba"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2 # Min ISR
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3 # Secret offset partition replication factor
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3 # Secret tx info replictaion factor
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2 # Min ISR count for tx
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - e-commerce-backend

  kafka-2:
    image: apache/kafka:latest
    container_name: kafka-2
    ports:
      - "9094:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka-2:9092,CONTROLLER://kafka-2:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      CLUSTER_ID: "12242d2d-73eb-4acf-ae75-744c4e6968ba"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - e-commerce-backend

  kafka-3:
    image: apache/kafka:latest
    container_name: kafka-3
    ports:
      - "9096:9092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka-3:9092,CONTROLLER://kafka-3:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      CLUSTER_ID: "12242d2d-73eb-4acf-ae75-744c4e6968ba"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - e-commerce-backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - e-commerce-backend

  api-gateway:
    container_name: "api-gateway"
    build: ./api-gateway
    env_file:
      - ./.env
    environment:
      SERVER_PORT: 80
    ports:
      - "80:80"
    volumes:
      - ./api-gateway:/app
    networks:
      - e-commerce-backend

  postgres-user:
    container_name: "postgres-user"
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - e-commerce-backend

  user-service:
    container_name: "user-service"
    build: ./user-service
    restart: always
    depends_on:
      postgres-user:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      SERVER_PORT: 8081
      POSTGRES_URL: postgres://root:password@postgres-user:5432/db?sslmode=disable
    volumes:
      - ./user-service:/app
    networks:
      - e-commerce-backend

  postgres-catalog:
    container_name: "postgres-catalog"
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - postgres-catalog-data:/var/lib/postgresql/data
    networks:
      - e-commerce-backend

  catalog-service:
    container_name: "catalog-service"
    build: ./catalog-service
    restart: always
    depends_on:
      postgres-catalog:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      SERVER_PORT: 8082
      POSTGRES_URL: postgres://root:password@postgres-catalog:5432/db?sslmode=disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./catalog-service:/app
    networks:
      - e-commerce-backend

  postgres-subscription:
    container_name: "postgres-subscription"
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5435:5432"
    volumes:
      - postgres-subscription-data:/var/lib/postgresql/data
    networks:
      - e-commerce-backend

  subscription-service:
    container_name: "subscription-service"
    build: ./subscription-service
    restart: always
    depends_on:
      postgres-subscription:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      SERVER_PORT: 8083
      POSTGRES_URL: postgres://root:password@postgres-subscription:5432/db?sslmode=disable
    volumes:
      - ./subscription-service:/app
    networks:
      - e-commerce-backend

  notification-service:
    container_name: "notification-service"
    build: ./notification-service
    restart: always
    env_file:
      - ./.env
    volumes:
      - ./notification-service:/app
    networks:
      - e-commerce-backend

networks:
  e-commerce-backend:
    driver: bridge

volumes:
  redis-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  postgres-user-data:
  postgres-catalog-data:
  postgres-subscription-data:
